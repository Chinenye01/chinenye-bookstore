/*
 * TCSS 305 Winter 2019
 * Assignment 2
 */

package tests;

import static org.junit.Assert.*;

import java.math.BigDecimal;
import model.Item;
import model.ItemOrder;
import model.Cart;
import org.junit.Before;
import org.junit.Test;

/**
 * This contains the tests for the ShoppingCart class.
 * 
 * @author Chinenye Ezenwoye chinenye@uw.edu
 * @version January 28, 2019
 */
public class CartTest
{
    /** The ShoppingCart that will be used in the tests. */
    private Cart myCart;

    /**
     * This is a method to initialize the ShoppingCart for each of the tests.
     */
    @Before
    public void setUp()
    {
        myCart = new Cart();
    }


    /**
     * Test method for {@link Cart#calculateTotal()}.
     */
    @Test
    public void testCalculateTotal()
    {
        //Without Membership Over $20
        myCart.setMembership(false);
        myCart.add(new ItemOrder(new Item("Shoes", new BigDecimal("39.99")), 5));
        myCart.add(new ItemOrder(new Item("Car", new BigDecimal("19.99")), 2));
        assertEquals(new BigDecimal("239.93"), myCart.calculateTotal());
        
        //With Membership Over $20
        myCart.setMembership(true);
        assertEquals(new BigDecimal("203.94"), myCart.calculateTotal());
        
        //No Items In Cart
        myCart.clear();
        assertEquals(new BigDecimal("0.00"), myCart.calculateTotal());
        
        //Without Membership Under $20
        myCart.setMembership(false);
        myCart.add(new ItemOrder(new Item("Shoes", new BigDecimal("9.99")), 2));
        assertEquals(new BigDecimal("19.98"), myCart.calculateTotal());
        
        //With Membership Under $20
        myCart.setMembership(true);
        myCart.add(new ItemOrder(new Item("Shoes", new BigDecimal("9.99")), 1));
        assertEquals(new BigDecimal("9.99"), myCart.calculateTotal());
        
        //With Bulk Quantity
        myCart.clear();
        myCart.setMembership(false);
        myCart.add(new ItemOrder(new Item("Car", new BigDecimal("19.99"), 4, 
                                                  new BigDecimal("79.99")), 10));
        assertEquals(new BigDecimal("199.96"), myCart.calculateTotal());
    }

    /**
     * Test method for {@link Cart#toString()}.
     */
    @Test
    public void testToString()
    {
        myCart.add(new ItemOrder(new Item("Shoes", new BigDecimal("39.99")), 5));
        myCart.add(new ItemOrder(new Item("Car", new BigDecimal("19.99")), 2));
        assertEquals("{Shoes, $39.99=5, Car, $19.99=2}", myCart.toString());
    }

}